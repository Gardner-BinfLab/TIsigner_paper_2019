<?phprequire_once "CodonOpt_Controller_ViewResultDetail.php";require_once "CodonOpt_ViewResultSummary_Column.php";//This is the ancestor for viewing a summary of results//It is used by two desendants. One to view summary with all results//The second to view summary of user defined sequences onlyclass CodonOpt_Controller_ViewResultSummary_Ancestor extends CodonOpt_Controller_ViewResult_Ancestor {	protected $TableColumns = array();		//Array of Table Columns	public function getTableColumns() {		return $this->TableColumns;	}	public function getCurrentRowCount() {		return $this->TextCodeColumn->CountDataPoints();	}	public function getEncrypt_Id() {		return $this->getCurrentJob()->getEncrypt_id();	}		protected $TextCodeColumn;	public function getTextCodeColumn() {		return $this->TextCodeColumn;	}		protected $LinkCodeColumn;	public function getLinkCodeColumn() {		return $this->LinkCodeColumn;	}		protected $IsThereOriginalNucleotideInput;	public function getIsThereOriginalNucleotideInput() {		return $this->IsThereOriginalNucleotideInput;	}		//Constructor Takes in Current Job, and uses it to instantiate Jobs Controller	public function CodonOpt_Controller_ViewResultSummary_Ancestor ($InputJob) {		parent::__construct( $InputJob, true );	//Parent calls job		$submitted_on = $this->getCurrentJob()->getSubmitted_on();		if ( isset( $submitted_on ) ) {			//Check if submitted			$job_end_on = $this->getCurrentJob()->getJob_end_on();			if ( isset($job_end_on) ) {			//If job has ended			} else {							//Otherwise job has not ended				header("Location: viewresult.php?".$this::getEncryptIDGetKey()."=".$this->getEncryptID);				exit;							//redirect back to results page			}		} else {								//Otherwise not yet submitted			header("Location: setup_optimization.php.php?".$this::getEncryptIDGetKey()."=".$this->getEncryptID);			exit;								//Redirect back to setup page		}	}		//Parse Results	protected function ParseResults (		$ResultsSummaryArray					//Results to parse into summary format	) {			$this->TableColumns = array();			//Reset existing columns		$IncludeOutputSequence = false;			//Whether to include output sequences (Default to false)		//Fill out Table Column Headers		$TempTableColumns = array();		$this->TextCodeColumn = new CodonOpt_ViewResultSummary_Column(			"Name&nbsp;(PDF)",//HTML table header			"Name",								//CSV header			"Name",								//Chart Title			false								//Is this Column plottable on XY axis		);		$this->LinkCodeColumn = new CodonOpt_ViewResultSummary_Column(			"Link",								//HTML table header			"Link",								//CSV header			"Link",								//Chart Title			false								//Is this Column plottable on XY axis		);				if ( $this->showOptimizationParameter( $this->getOptimize_ic() ) ) {			$TempTableColumns["IC Fitness"] = new CodonOpt_ViewResultSummary_Column(				"IC<br/>Fitness<br/>(".$this->getOptimizationParameterType( $this->getOptimize_ic() ).")",				"IC Fitness (".$this->getOptimizationParameterType( $this->getOptimize_ic() ).")",				"IC Fitness",				true			);		}		if ( $this->showOptimizationParameter( $this->getOptimize_cc() ) ) {			$TempTableColumns["CC Fitness"] = new CodonOpt_ViewResultSummary_Column(				"CC<br/>Fitness<br/>(".$this->getOptimizationParameterType( $this->getOptimize_cc() ).")",				"CC Fitness (".$this->getOptimizationParameterType( $this->getOptimize_cc() ).")",				"CC Fitness",				true			);		}		if ( $this->showOptimizationParameter( $this->getOptimize_cai() ) ) {			$TempTableColumns["CAI"] = new CodonOpt_ViewResultSummary_Column(				"CAI<br/>(".$this->getOptimizationParameterType( $this->getOptimize_cai() ).")",				"CAI (".$this->getOptimizationParameterType( $this->getOptimize_cai() ).")",				"CAI",				true			);		}		if ( $this->showOptimizationParameter( $this->getOptimize_hidden_stop_codon() ) ) {			$TempTableColumns["Hidden Stop Codons"] = new CodonOpt_ViewResultSummary_Column(				"Hidden<br/>Stop<br/>Codons<br/>(".$this->getOptimizationParameterType( $this->getOptimize_hidden_stop_codon() ).")",				"Hidden Stop Codons (".$this->getOptimizationParameterType( $this->getOptimize_hidden_stop_codon() ).")",				"Hidden Stop Codons",				true			);		}			if ( $this->showGC_target() ) {			//Note on the Chart, GC_Content comes after GC_Content_Fitness, and is Colour Code Only			//But on the table, GC_Content comes before GC_Content_Fitness instead			$TempTableColumns["GC Content (%)"] = new CodonOpt_ViewResultSummary_Column(				"GC<br/>Content<br/>(Target:<br/>".$this->getGC_target().")",				"GC Content (Target: ".$this->getGC_target().")",				"GC Content",				false			);			$TempTableColumns["GC Content Fitness"] = new CodonOpt_ViewResultSummary_Column(				"GC<br/>Content<br/>Fitness<br/>",				"GC Content Fitness",				"GC Content Fitness",				true			);		}							if ( $this->showExclusionReport() ) {			$TempTableColumns["Exclusion Bases"] = new CodonOpt_ViewResultSummary_Column(				"Exclusion<br/>Bases<br/>&nbsp;",				"Exclusion Bases",				"Exclusion Bases",				false			);		}			if ( $this->showRepeat_consec_report() ) {			$TempTableColumns["Consecutive Repeat Bases"] = new CodonOpt_ViewResultSummary_Column(				"Consecutive<br/>Repeat<br/>Bases",				"Consecutive Repeat Bases",				"Consecutive Repeat Bases",				false			);		}		if ( $this->showRepeat_allmotif_report() ) {			$TempTableColumns["Repeated Motif Bases"] = new CodonOpt_ViewResultSummary_Column(				"Repeated<br/>Motif<br/>Bases",				"Repeated Motif Bases",				"Repeated Motif Bases",				false			);		}				//Fill out Table Data		if ( isset($ResultsSummaryArray) ) {			//If there are results			//Autodetect IncludeOutputSequence			if ( count($ResultsSummaryArray) >= 1) {	//If results have content				$tempOutput = 							//Extract output sequence of first sequence					$ResultsSummaryArray[0]->getOutput_sequence();				if ( isset($tempOutput) ) {				//If output is defined					if ( strlen($tempOutput) >= 1 ) {	//and longer than 1						$IncludeOutputSequence = true;	//Then there is output sequence					}				}			}						//If Including Output Sequence, include that as a table column			if ($IncludeOutputSequence) {				$TempTableColumns["Output Sequence"] = new CodonOpt_ViewResultSummary_Column(					"Output<br/>Sequence",					"Output Sequence",					"Output Sequence",					false				);						}						//Generate Rows			foreach ($ResultsSummaryArray as $TempResult) {				$TempController = new CodonOpt_Controller_ViewResultDetail(					$this->getCurrentJob(),	//Input Job					$TempResult,					false					//Do not bnuild Translation Rules or Color Picker				);								{	//Generate Code and Link Columns					$tempStrText = "";					$tempStrLink = $TempController->getLinkKey();						if ( $TempController->getUser_insert() ) {				//If User Inserted						$tempStrText .= "UDS: ".$TempController->getUser_given_title();					} else {												//Otherwise not user inserted						$tempStrText .= $TempController->getDisplay_id();	//Show ID						if ( 												//If there is a user title							strlen($TempController->getUser_given_title()) >= 1						) {													//Append it at the end							$tempStrText .= ": ".$TempController->getUser_given_title();						}						if ($TempController->getDisplay_id() == 0) {		//If this is sequence 0							$this->IsThereOriginalNucleotideInput = true;	//Flag Original Nucleotide Input as found						}					}					$this->TextCodeColumn->AddDataPoint($tempStrText);					$this->LinkCodeColumn->AddDataPoint($tempStrLink);				}								if ( $this->showOptimizationParameter( $this->getOptimize_ic() ) ) {					$Ic_fitness = $TempController->getIc_fitness();					$TempTableColumns["IC Fitness"]->AddDataPoint($Ic_fitness);				}				if ( $this->showOptimizationParameter( $this->getOptimize_cc() ) ) {					$Cc_fitness = $TempController->getCc_fitness();					$TempTableColumns["CC Fitness"]->AddDataPoint($Cc_fitness);				}				if ( $this->showOptimizationParameter( $this->getOptimize_cai() ) ) {					$Cai_fitness = $TempController->getCai_fitness();					$TempTableColumns["CAI"]->AddDataPoint($Cai_fitness);				}							if ( $this->showOptimizationParameter( $this->getOptimize_hidden_stop_codon() ) ) {					$Number_of_stop_codon_motifs = $TempController->getStop_codon_motifs();					$TempTableColumns["Hidden Stop Codons"]->AddDataPoint($Number_of_stop_codon_motifs);				}				if ( $this->showGC_target() ) {					$Gc_content_fitness = $TempController->getGc_content_fitness();					$Gc_content = $TempController->getOuputNucleotideGCpercent();					$TempTableColumns["GC Content Fitness"]->AddDataPoint($Gc_content_fitness);					$TempTableColumns["GC Content (%)"]->AddDataPoint($Gc_content);				}						if ( $this->showExclusionReport() ) {					$Number_of_exclusion_bases = $TempController->getTotalExclusionBasesFound();					$TempTableColumns["Exclusion Bases"]->AddDataPoint($Number_of_exclusion_bases);				}						if ( $this->showRepeat_consec_report() ) {					$Number_of_repeat_bases = $TempController->getOutputBaseCount_repeat_consec();					$TempTableColumns["Consecutive Repeat Bases"]->AddDataPoint($Number_of_repeat_bases);				}				if ( $this->showRepeat_allmotif_report() ) {					$Number_of_repeat_bases = $TempController->getOutputBaseCount_repeat_allmotif();					$TempTableColumns["Repeated Motif Bases"]->AddDataPoint($Number_of_repeat_bases);				}				if ($IncludeOutputSequence) {					$OutputSequence = $TempController->getOutputNucleotide();					$TempTableColumns["Output Sequence"]->AddDataPoint($OutputSequence);				}			}		}				//Transfer Table Columns into Numerical Array		foreach ($TempTableColumns as $Name=>$ColumnObject) {			array_push( $this->TableColumns , $ColumnObject );		}	}}?>